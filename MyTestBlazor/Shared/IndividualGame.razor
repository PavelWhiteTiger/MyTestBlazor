@if (Game is not null)
{
    @if (!IsTable)
    {
        <div class="row text-center alert alert-info">
            <div class="col">
                <p>@Game.Name</p>
                <p>@Game.Genre</p>
                <p>@Game.ReleaseDate.ToShortDateString()</p>


                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary" @onclick="SwitchGame">Switch the game</button>
                    </div>
                </div>
                @if (Game.Name.Equals("Vedmachilo") && AppStyle.WitcherWords != null)
                {
                    <div class="row mt-3">
                        <div class="col alert alert-light text-center">
                            @AppStyle.WitcherWords[rnd.Next(0, AppStyle.WitcherWords.Count)];
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <tr>
            <td>@Game.Name</td>
            <td>@Game.Genre</td>
            <td>@Game.ReleaseDate.ToShortDateString()</td>
            <td>
                @if (DisplayButtons)
                {
                    <button class="btn btn-danger" @onclick="() => DeleteGame.InvokeAsync(Game)">Delete</button>
                }

            </td>
        </tr>
    }
}


@code {

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public bool IsTable { get; set; }

    [Parameter]
    public bool DisplayButtons { get; set; }

    [Parameter]
    public EventCallback<Game> DeleteGame { get; set; }

    [Parameter]
    public EventCallback SwitchGame { get; set; }

    [CascadingParameter]
    public AppStyle AppStyle { get; set; }

    Random rnd = new(DateTime.Now.Millisecond);

    /*
    string message;

    void Delete()
    {
        message = $"Game {Game.Name} deleted";
    }*/

}